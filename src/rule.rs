#[derive(Clone, Copy, PartialEq)]
pub enum Rule {
    Nop,
    Digit,
    DigitInv,
    DigitEnd,
    Addition,
    Subtraction,
    Increment,
    Decrement,
    Divide,
    Multiply,
    Not,
    And,
    Or,
    Xor,
    RotateLeft,
    RotateRight,
    Push,
    Pop,
    Move1,
    Move2,
    Switch,
    Duplicate,
    Unduplicate,
    Swap1,
    Swap2,
    Dig,
    Bury,
    Flip,
    Over,
    Under,
    Reverse,
    StringToggle,
    StringPush,
    StringPop,
    Mirror1,
    Mirror2,
    Branch1,
    Branch2,
    Branch3,
    Halt,
}

impl Rule {
    pub fn char(&self) -> char {
        match *self {
            Rule::Nop => ' ',
            Rule::Digit => ' ',
            Rule::DigitInv => ' ',
            Rule::DigitEnd => ' ',
            Rule::Addition => ' ',
            Rule::Subtraction => ' ',
            Rule::Increment => ' ',
            Rule::Decrement => ' ',
            Rule::Divide => ' ',
            Rule::Multiply => ' ',
            Rule::Not => ' ',
            Rule::And => ' ',
            Rule::Or => ' ',
            Rule::Xor => ' ',
            Rule::RotateLeft => ' ',
            Rule::RotateRight => ' ',
            Rule::Push => ' ',
            Rule::Pop => ' ',
            Rule::Move1 => ' ',
            Rule::Move2 => ' ',
            Rule::Switch => ' ',
            Rule::Duplicate => ' ',
            Rule::Unduplicate => ' ',
            Rule::Swap1 => ' ',
            Rule::Swap2 => ' ',
            Rule::Dig => ' ',
            Rule::Bury => ' ',
            Rule::Flip => ' ',
            Rule::Over => ' ',
            Rule::Under => ' ',
            Rule::Reverse => ' ',
            Rule::StringToggle => ' ',
            Rule::StringPush => ' ',
            Rule::StringPop => ' ',
            Rule::Mirror1 => ' ',
            Rule::Mirror2 => ' ',
            Rule::Branch1 => ' ',
            Rule::Branch2 => ' ',
            Rule::Branch3 => ' ',
            Rule::Halt => ' ',
        }
    }
}
